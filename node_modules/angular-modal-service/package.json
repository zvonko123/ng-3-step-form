{
  "name": "angular-modal-service",
  "version": "0.6.9",
  "description": "AngularJS Service for showing Modals and Popups",
  "main": "./dst/angular-modal-service.js",
  "scripts": {
    "test": "gulp test",
    "test-debug": "./node_modules/.bin/karma start ./test/karma.config.js --no-single-run --browsers Chrome",
    "coveralls": "cp build/coverage/PhantomJS*/lcov.info lcov.info && node node_modules/coveralls/bin/coveralls.js < lcov.info"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dwmkerr/angular-modal-service.git"
  },
  "keywords": [
    "angular",
    "angularjs",
    "modal",
    "popup"
  ],
  "author": {
    "name": "Dave Kerr",
    "url": "github.com/dwmkerr"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dwmkerr/angular-modal-service/issues"
  },
  "homepage": "https://github.com/dwmkerr/angular-modal-service",
  "devDependencies": {
    "connect-livereload": "^0.5.3",
    "coveralls": "^2.10.0",
    "express": "^4.12.0",
    "gulp": "^3.8.11",
    "gulp-header": "^1.2.2",
    "gulp-jshint": "^1.9.2",
    "gulp-open": "^1.0.0",
    "gulp-rename": "^1.2.0",
    "gulp-sourcemaps": "^1.5.0",
    "gulp-uglify": "^1.1.0",
    "jshint-stylish": "^2.0.0",
    "karma": "^0.13.10",
    "karma-chrome-launcher": "^0.2.0",
    "karma-coverage": "^0.5.1",
    "karma-jasmine": "~0.3",
    "karma-junit-reporter": "~0.3",
    "karma-phantomjs-launcher": "^0.2.1",
    "opn": "^3.0.1",
    "phantomjs": "^1.9.18",
    "tiny-lr": "^0.1.5"
  },
  "readme": "angular-modal-service\n=====================\n\n[![Build Status](https://secure.travis-ci.org/dwmkerr/angular-modal-service.png?branch=master)](https://travis-ci.org/dwmkerr/angular-modal-service)\n[![Coverage Status](https://coveralls.io/repos/dwmkerr/angular-modal-service/badge.png?branch=master)](https://coveralls.io/r/dwmkerr/angular-modal-service?branch=master)\n[![Dependencies](https://david-dm.org/dwmkerr/angular-modal-service.svg?theme=shields.io)](https://david-dm.org/dwmkerr/angular-modal-service)\n[![Dev Dependencies](https://david-dm.org/dwmkerr/angular-modal-service/dev-status.svg?theme=shields.io)](https://david-dm.org/dwmkerr/angular-modal-service#info=devDependencies)\n\nModal service for AngularJS - supports creating popups and modals via a service. See [a quick fiddle](http://jsfiddle.net/dwmkerr/8MVLJ/) or a full set of samples at [dwmkerr.github.io/angular-modal-service](http://dwmkerr.github.io/angular-modal-service).\n\n1. [Usage](#usage)\n2. [Developing](#developing)\n3. [Tests](#tests)\n4. [FAQ & Troubleshooting](#faq)\n5. [Thanks](#thanks)\n\n## Usage\n\nFirst, install with Bower:\n\n```\nbower install angular-modal-service\n```\n\nThen reference the minified script:\n\n```html\n<script src=\"bower_components\\angular-modal-service\\dst\\angular-modal-service.min.js\"></script>\n```\n\nSpecify the modal service as a dependency of your application:\n\n```js\nvar app = angular.module('sampleapp', ['angularModalService']);\n```\n\nNow just inject the modal service into any controller, service or directive where you need it.\n\n```js\napp.controller('SampleController', function($scope, ModalService) {\n\n  $scope.showAModal = function() {\n\n  \t// Just provide a template url, a controller and call 'showModal'.\n    ModalService.showModal({\n      templateUrl: \"yesno/yesno.html\",\n      controller: \"YesNoController\"\n    }).then(function(modal) {\n      // The modal object has the element built, if this is a bootstrap modal\n      // you can call 'modal' to show it, if it's a custom modal just show or hide\n      // it as you need to.\n      modal.element.modal();\n      modal.close.then(function(result) {\n        $scope.message = result ? \"You said Yes\" : \"You said No\";\n      });\n    });\n\n  };\n\n});\n```\n\nCalling `showModal` returns a promise which is resolved when the modal DOM element is created\nand the controller for it is created. The promise returns a `modal` object which contains the\nelement created, the controller, the scope and a `close` promise which is resolved when the\nmodal is closed - this `close` promise provides the result of the modal close function.\n\nThe modal controller can be any controller that you like, just remember that it is always\nprovided with one extra parameter - the `close` function. Here's an example controller\nfor a bootstrap modal:\n\n```js\napp.controller('SampleModalController', function($scope, close) {\n\n $scope.dismissModal = function(result) {\n \tclose(result, 200); // close, but give 200ms for bootstrap to animate\n };\n\n});\n```\n\nThe `close` function is automatically injected to the modal controller and takes the result\nobject (which is passed to the `close` promise used by the caller). It can take an optional\nsecond parameter, the number of milliseconds to wait before destroying the DOM element. This\nis so that you can have a delay before destroying the DOM element if you are animating the\nclosure.\n\nNow just make sure the `close` function is called by your modal controller when the modal\nshould be closed and that's it. Quick hint - if you are using Bootstrap for your modals,\nthen make sure the modal template only contains one root level element, see the [FAQ](#faq)\nfor the gritty details of why.\n\nTo pass data into the modal controller, use the `inputs` field of the modal options. For example:\n\n```js\nModalService.showModal({\n  templateUrl: \"exampletemplate.html\",\n  controller: \"ExampleController\",\n  inputs: {\n    name: \"Fry\",\n    year: 3001\n  }\n})\n```\n\ninjects the `name` and `year` values into the controller:\n\n```js\napp.controller('ExampleController', function($scope, name, year, close) {\n});\n```\n\nYou can also provide a controller function directly to the modal, with or without the controllerAs attribute :\n\n```js\nModalService.showModal({\n  template: \"<div>Fry lives in {{futurama.city}}</div>\",\n  controller: function() {\n    this.city = \"New New York\";\n  },\n  controllerAs : \"futurama\"\n})\n```\n#### ShowModal Options\n\nThe `showModal` function takes an object with these fields:\n\n* `controller`: The name of the controller to created. It could be a function.\n* `controllerAs` : The name of the variable on the scope the controller is assigned to - (optional).\n* `templateUrl`: The URL of the HTML template to use for the modal.\n* `template`: If `templateUrl` is not specified, you can specify `template` as raw\n  HTML for the modal.\n* `inputs`: A set of values to pass as inputs to the controller. Each value provided\n  is injected into the controller constructor.\n* `appendElement`: The custom angular element to append the modal to instead of default `body` element.\n\n#### The Modal Object\n\nThe `modal` object returned by `showModal` has this structure:\n\n* `modal.element` - The DOM element created. This is a jquery lite object (or jquery if full\n  jquery is used). If you are using a bootstrap modal, you can call `modal` on this object\n  to show the modal.\n* `modal.scope` - The new scope created for the modal DOM and controller.\n* `modal.controller` - The new controller created for the modal.\n* `modal.close` - A promise which is resolved when the modal is closed.\n\n#### The Modal Controller\n\nThe controller that is used for the modal always has one extra parameter injected, a function\ncalled `close`. Call this function with any parameter (the result). This result parameter is\nthen passed as the parameter of the `close` promise used by the caller.\n\n### Error Handing\n\nAs the `ModalService` exposes only one function, `showModal`, error handling is always performed in the same way.\nThe `showModal` function returns a promise - if any part of the process fails, the promise will be rejected, meaning\nthat a promise error handling function or `catch` function can be used to get the error details:\n\n```js\nModalService.showModal({\n  templateUrl: \"some/template.html\",\n  controller: \"SomeController\"\n}).then(function(modal) {\n  // only called on success...\n}).catch(function(error) {\n  // error contains a detailed error message.\n  console.log(error);\n});\n```\n\n## Developing\n\nTo work with the code, just run:\n\n```\nnpm install\nbower install\ngulp\n```\n\nThe samples will be opened in the browser. All JavaScript changes will re-run the tests, all samples changes are automatically reloaded into the browser.\n\nThe easiest way to adapt the code is to play with some of the examples in the ``samples`` folder.\n\n## Tests\n\nRun tests with:\n\n```\nnpm test\n```\n\nA coverage report is written to `build\\coverage`.\n\nDebug tests with:\n\n```\nnpm run test-debug\n```\n\nThis will run the tests in Chrome, allowing you to debug.\n\n## FAQ\n\nHaving problems? Check this FAQ first.\n\n**I'm using a Bootstrap Modal and the backdrop doesn't fade away**\n\nThis can happen if your modal template contains more than one top level element.\nImagine this case:\n\n```html\n<!-- Some comment -->\n<div>...some modal</div>\n```\n\nWhen you create the modal, the Angular Modal Service will add both of these elements\nto the page, then pass the elements to you as a jQuery selector. When you call bootstrap's\n`modal` function on it, like this:\n\n```js\nmodal.element.modal();\n```\n\nIt will try and make both elements into a modal. This means both elements will get a backdrop.\nIn this case, either remove the extra elements, or find the specific element you need\nfrom the provided `modal.element` property.\n\n**I don't want to use the 'data-dismiss' attribute on a button, how can I close a modal manually?**\n\nYou can check the 'Complex' sample ([complexcontroller.js](samples/complex/complexcontroller.js)). The 'Cancel' button closes without using the `data-dismiss` attribute.\nAll you need to do is grab the modal element in your controller, then call the bootstrap `modal` function\nto manually close the modal. Then call the `close` function as normal:\n\n```js\napp.controller('ExampleModalController', [\n  '$scope', '$element', 'close',\n  function($scope, $element, close) {\n\n  $scope.closeModal = function() {\n\n    //  Manually hide the modal using bootstrap.\n    $element.modal('hide');\n\n    //  Now close as normal, but give 500ms for bootstrap to animate\n    close(null, 500);\n  };\n\n}]);\n```\n\n**I'm using a Bootstrap Modal and the dialog doesn't show up**\n\nCode is entered exactly as shown the example but when the showAModal() function fires the modal template html is appended to the body while the console outputs:\n\n```\nTypeError: undefined is not a function\n```\n\nPointing to the code: `modal.element.modal();`. This occurs if you are using a Bootstap modal but have not included the Bootstrap JavaScript. The recommendation is to include the modal JavaScript before AngularJS.\n\n\n## Thanks\n\nThanks go the the following contributors:\n\n* [joshvillbrandt](https://github.com/joshvillbrandt) - Adding support for `$templateCache`.\n* [cointilt](https://github.com/cointilt) - Allowing the modal to be added to a custom element, not just the body.\n* [kernowjoe](https://github.com/kernowjoe) - controllerAs\n* [poporul](https://github.com/poporul) - Improving the core logic around compilation and inputs.\n* [jonasnas](https://github.com/jonasnas) - Fixing template cache logic.\n* [maxdow](https://github.com/maxdow) - Added support for controller inlining.",
  "readmeFilename": "README.md",
  "_id": "angular-modal-service@0.6.9",
  "dist": {
    "shasum": "70f49408a496e8be07e4143da8040e34b27676e1"
  },
  "_from": "angular-modal-service@",
  "_resolved": "https://registry.npmjs.org/angular-modal-service/-/angular-modal-service-0.6.9.tgz"
}
